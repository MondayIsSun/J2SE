目的是使用策略模式解决系统的易拓展问题

DEMO是在已经实现了鸭子基本能力的基础之上给鸭子新增飞行的能力

这里不能单单地就直接使用继承、抽象方法、组合等实现，而是要考虑到系统的易拓展性，代码的可重用性等等

=================================================================

1、首先我们需要编写飞行策略接口

2、接着需要在基类当中去组合这个飞行策略接口
并且为它生成set方法以方便注入
然后给基类新增飞行的能力

3、向我们已有的实现类当中添加飞行的行为
提供算法家族的成员
在这个DEMO当中就是添加一些策略的实现家族

4、并且使用set方法为我们的具体鸭子实现具体的飞行能力

=================================================================

注意橡胶鸭、大黄鸭、太空鸭这三只鸭子的出现是有其特定思考的

首先通过橡胶鸭和大黄鸭的开发比较我们可以发现策略模式在代码复用方面的表现，我们只需要实现一个策略模式就可以实现多种鸭子飞行能力的实现
其次通过太空鸭的开发我们发现策略模式可以很好地适应变更

=================================================================

策略模式的总结

策略模式的设计原则
1、分清变与不变，把变化的部分独立出来使用一个总的接口来代替，把不变的部分囊括到基类框架当中去，使用继承以复用
2、面向接口而不是面向具体实现编程（接口为我们提供了契约，在总体上为我们规定了双发的行为框架，在多态的特性使用不同的实现类展现了世界的多样性）
3、多用组合少用继承

策略模式的实现
1、通过分离变化得出的策略接口Strategy
2、Strategy的实现类
3、客户程序  有一个  Strategy
4、在客户程序中选择/组合正确的Strategy实现









